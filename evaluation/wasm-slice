#!/usr/bin/env python3

import sys, subprocess, os, csv, subprocess, shutil
import heuristics_finder

# this takes upto 150GB of memory.
# TODO: why?
WASMR3_PATH = os.getenv("WASMR3_PATH", "/home/wasm-r3")
PARALLEL = os.getenv
TIMEOUT = 120

# The Wasm file is given as the first and only argument to the script.
if len(sys.argv) != 3:
    print("Usage: wasm-slice <ORACLE_SCRIPT> <WASM_FILE>")
    sys.exit(1)

oracle_script = sys.argv[1]
test_input = sys.argv[2]
test_name = os.path.splitext(os.path.basename(test_input))[0]


# We prioritize single function replay of heuristic > dynamic > all
def get_fidx():
    heuristic_fidx = heuristics_finder.get_heuristic_fidx(test_input, oracle_script)
    if heuristic_fidx == []:
        exit(1)
    dynamic_fidx = heuristics_finder.get_dynamic_fidx(test_input)
    all_fidx = heuristics_finder.get_all_fidx(test_input)

    print("Heuristic function indices:", heuristic_fidx)
    dynamic_filtered = [idx for idx in dynamic_fidx if idx not in heuristic_fidx]
    print("Dynamic function indices (except heuristic):", dynamic_filtered)

    # Filter out both heuristic and dynamic indices from all
    all_filtered = [
        idx for idx in all_fidx if idx not in heuristic_fidx and idx not in dynamic_fidx
    ]
    print("All function indices (except heuristic and dynamic):", all_filtered)
    exit(1)

    # Create a set to keep track of added indices
    added = set()
    combined_fidx = []

    # Add heuristic_fidx first
    for idx in heuristic_fidx:
        if idx not in added:
            combined_fidx.append(idx)
            added.add(idx)

    # Add dynamic_fidx second
    for idx in dynamic_fidx:
        if idx not in added:
            combined_fidx.append(idx)
            added.add(idx)

    # Add all_fidx last
    for idx in all_fidx:
        if idx not in added:
            combined_fidx.append(idx)
            added.add(idx)

    return combined_fidx


def run_slicedice(testname, fidx):
    try:
        # fidxargs = " ".join([f"-i {f}" for f in fidx.split("-")])
        command = f"timeout {TIMEOUT}s npm test slicedice -- -t {testname} -i {fidx}"
        output = subprocess.check_output(command, shell=True, text=True)
        # TODO: make this configurable
        replay_wasm_path = f"{WASMR3_PATH}/benchmarks/{test_name}/out/{fidx}/benchmarks/bin_1/replay.wasm"
        shutil.copy(
            replay_wasm_path,
            f"{WASMR3_PATH}/benchmarks/{test_name}/{test_name}.sliced.wasm",
        )
        interestingness_command = [oracle_script, replay_wasm_path]
        result = subprocess.run(interestingness_command, check=False)
        test_input_size = os.path.getsize(test_input)
        replay_wasm_size = os.path.getsize(replay_wasm_path)
        print("Test input file size:", test_input_size)
        print("Sliced wasm file size:", replay_wasm_size)
        sys.exit(result.returncode)
    except Exception as e:
        print(f"Failed to run {testname} - {fidx}")
        print(e)
        return [testname, fidx, "fail"]


for fidx in get_fidx():
    run_slicedice(test_name, fidx)
